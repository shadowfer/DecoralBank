# Comprehensive Language and Tool Configuration

# -- Docker --------------------------------------------------------------------

[default]
install = "echo 'INSERT-INSTALL-COMMAND-HERE'"
usage = "echo 'INSERT-RUN-COMMAND-HERE'"
test = "echo 'INSERT-TEST-COMMAND-HERE'"
shield = "https://img.shields.io/badge/Replace%20Me-999999?style=flat&logo=github&logoColor=white"
website = "https://img.shields.io/"

[containers]
name = "Docker"
extensions = ["Dockerfile", "docker-compose.yml", "docker-compose.yaml"]

[containers.docker]
files = ["Dockerfile", "Dockerfile.dev", "Dockerfile.prod"]
install = "docker build -t {image_name} ."
usage = "docker run -it {image_name}"
test = ""
shield = "https://img.shields.io/badge/Docker-2CA5E0.svg?style={badge_style}&logo=docker&logoColor=white"
website = "https://www.docker.com/"

[containers.docker_compose]
files = ["docker-compose.yml", "docker-compose.dev.yml", "docker-compose.prod.yml"]
install = "docker-compose build"
usage = ["docker-compose up -d", "docker-compose up --build -d"]
test = "docker-compose run --rm {service}"
shield = "https://img.shields.io/badge/Docker_Compose-2CA5E0.svg?style={badge_style}&logo=docker&logoColor=white"
website = "https://docs.docker.com/compose/"

# -- Python ---------------------------------------------------------------------

[python]
name = "Python"
extensions = [".py", ".pyw", ".pyx"]
test_frameworks = ["pytest", "unittest", "nose", "doctest", "tox", "mamba", "behave", "robotframework"]

[python.package_managers.conda]
files = ["conda.yml", "conda.yaml", "environment.yml", "environment.yaml"]
install = "conda env create -f {file}"
usage = "conda activate {venv}\npython {entrypoint}"
test = "conda activate {venv}\npytest"
shield = "https://img.shields.io/badge/conda-342B029.svg?style={badge_style}&logo=anaconda&logoColor=white"
website = "https://docs.conda.io/"
languages = ["python"]
category = "package_manager"

[python.package_managers.pip]
files = ["requirements.txt", "requirements-dev.txt", "requirements-prod.txt", "requirements.in", "requirements.test.txt", "dev-requirements.txt"]
install = "pip install -r {file}"
usage = "python {entrypoint}"
test = "pytest"
shield = "https://img.shields.io/badge/Pip-3776AB.svg?style={badge_style}&logo=pypi&logoColor=white"
website = "https://pypi.org/project/pip/"
languages = ["python"]
category = "package_manager"

[python.package_managers.pipenv]
files = ["Pipfile", "Pipfile.lock"]
install = "pipenv install"
usage = "pipenv shell\n pipenv run python {entrypoint}"
test = "pipenv shell\n pipenv run pytest"
shield = "https://img.shields.io/badge/Pipenv-3775A9.svg?style={badge_style}&logo=pypi&logoColor=white"
website = "https://pipenv.pypa.io/"
languages = ["python"]
category = "package_manager"

[python.package_managers.pdm]
files = ["pyproject.toml", "pdm.lock"]
install = "pdm install"
usage = "pdm run python {entrypoint}"
test = "pdm run pytest"
shield = "https://img.shields.io/badge/PDM-AC75D7.svg?style={badge_style}&logo=PDM&logoColor=white"
website = "https://pdm.fming.dev/"
languages = ["python"]
category = "package_manager"

[python.package_managers.flit]
files = ["pyproject.toml", "flit.ini"]
install = "flit install"
usage = "python -m {entrypoint}"
test = "python -m pytest"
shield = "https://img.shields.io/badge/Flit-3B5526.svg?style={badge_style}&logo=flit&logoColor=white"
website = "https://flit.readthedocs.io/"
languages = ["python"]
category = "package_manager"

[python.package_managers.poetry]
files = ["pyproject.toml", "poetry.lock"]
install = "poetry install"
usage = "poetry run python {entrypoint}"
test = "poetry run pytest"
shield = "https://img.shields.io/endpoint?url=https://python-poetry.org/badge/v0.json"
website = "https://python-poetry.org/"
languages = ["python"]
category = "package_manager"

[python.package_managers.uv]
files = ["pyproject.toml", "uv.lock"]
install = "uv sync --all-extras --dev"
usage = "uv run python {entrypoint}"
test = "uv run pytest tests/"
shield = "https://img.shields.io/badge/uv-DE5FE9.svg?style=for-the-badge&logo=uv&logoColor=white"
website = "https://docs.astral.sh/uv/"
languages = ["python"]
category = "package_manager"

[python.package_managers.streamlit]
files = ["streamlit", "requirements.txt"]
install = "pip install -r {file}"
usage = "streamlit run {entrypoint}"
test = "pytest"
shield = "https://img.shields.io/badge/Streamlit-FF4B4B.svg?style={badge_style}&logo=streamlit&logoColor=white"
website = "https://streamlit.io/"
languages = ["python"]
category = "package_manager"

# -- Java ---------------------------------------------------------------------

[java]
name = "Java"
extensions = [".java", ".class", ".jar"]
test_frameworks = ["JUnit", "TestNG", "Mockito"]

[java.package_managers.maven]
files = ["pom.xml"]
install = "mvn install"
usage = "mvn exec:java"
test = "mvn test"
shield = "https://img.shields.io/badge/Maven-C71A36.svg?style={badge_style}&logo=apache-maven&logoColor=white"
website = "https://maven.apache.org/"
languages = ["java"]
category = "build_system"

[java.package_managers.gradle]
files = ["build.gradle", "build.gradle.kts"]
install = "gradle build"
usage = "gradle run"
test = "gradle test"
shield = "https://img.shields.io/badge/Gradle-02303A.svg?style={badge_style}&logo=gradle&logoColor=white"
website = "https://gradle.org/"
languages = ["java", "kotlin", "groovy"]
category = "build_system"

# -- JavaScript/Node.js --------------------------------------------------------

[javascript]
name = "JavaScript"
extensions = [".js", ".jsx", ".mjs"]
test_frameworks = ["Jest", "Mocha", "Jasmine", "AVA"]

[javascript.package_managers.npm]
files = ["package.json", "package-lock.json", ".npmrc", ".nvmrc"]
install = "npm install"
usage = "npm start"
test = "npm test"
shield = "https://img.shields.io/badge/npm-CB3837.svg?style={badge_style}&logo=npm&logoColor=white"
website = "https://www.npmjs.com/"
languages = ["javascript", "typescript"]
category = "package_manager"

[javascript.package_managers.yarn]
files = ["yarn.lock"]
install = "yarn install"
usage = "yarn start"
test = "yarn test"
shield = "https://img.shields.io/badge/Yarn-2C8EBB.svg?style={badge_style}&logo=yarn&logoColor=white"
website = "https://yarnpkg.com/"
languages = ["javascript", "typescript"]
category = "package_manager"

# -- TypeScript ----------------------------------------------------------------

[typescript]
name = "TypeScript"
extensions = [".ts", ".tsx"]
test_frameworks = ["Jest", "Mocha", "Jasmine", "AVA"]

[typescript.package_managers.npm]
files = ["package.json", "package-lock.json", "tsconfig.json"]
install = "npm install"
usage = "npm start"
test = "npm test"
shield = "https://img.shields.io/badge/npm-CB3837.svg?style={badge_style}&logo=npm&logoColor=white"
website = "https://www.npmjs.com/"
languages = ["typescript"]
category = "package_manager"

# -- Ruby ----------------------------------------------------------------------

[ruby]
name = "Ruby"
extensions = [".rb", ".rbw", ".gemspec", ".rake"]
test_frameworks = ["RSpec", "Minitest", "Test::Unit", "Cucumber"]

[ruby.package_managers.bundler]
files = ["Gemfile", "Gemfile.lock"]
install = "bundle install"
usage = "bundle exec ruby {entrypoint}"
test = "bundle exec rspec"
shield = "https://img.shields.io/badge/Ruby-CC342D.svg?style={badge_style}&logo=ruby&logoColor=white"
website = "https://www.ruby-lang.org/"
languages = ["ruby"]
category = "package_manager"

# -- PHP -----------------------------------------------------------------------

[php]
name = "PHP"
extensions = [".php"]
test_frameworks = ["PHPUnit", "Codeception", "Behat"]

[php.package_managers.composer]
files = ["composer.json", "composer.lock"]
install = "composer install"
usage = "php {entrypoint}"
test = "vendor/bin/phpunit"
shield = "https://img.shields.io/badge/PHP-777BB4.svg?style={badge_style}&logo=php&logoColor=white"
website = "https://www.php.net/"
languages = ["php"]
category = "package_manager"

# -- Go ------------------------------------------------------------------------

[go]
name = "Go"
extensions = [".go"]
test_frameworks = ["testing", "gocheck", "ginkgo", "gomega"]

[go.package_managers."go modules"]
files = ["go.mod", "go.sum"]
install = "go build"
usage = "go run {entrypoint}"
test = "go test ./..."
shield = "https://img.shields.io/badge/Go-00ADD8.svg?style={badge_style}&logo=go&logoColor=white"
website = "https://golang.org/"
languages = ["go"]
category = "package_manager"

# -- Rust ----------------------------------------------------------------------

[rust]
name = "Rust"
extensions = [".rs"]
test_frameworks = ["cargo test"]

[rust.package_managers.cargo]
files = ["Cargo.toml", "Cargo.lock"]
install = "cargo build"
usage = "cargo run"
test = "cargo test"
shield = "https://img.shields.io/badge/Rust-000000.svg?style={badge_style}&logo=rust&logoColor=white"
website = "https://www.rust-lang.org/"
languages = ["rust"]
category = "package_manager"

# -- Swift ---------------------------------------------------------------------

[swift]
name = "Swift"
extensions = [".swift"]
test_frameworks = ["XCTest", "Quick", "Nimble"]

[swift.package_managers.swift_package_manager]
files = ["Package.swift"]
install = "swift build"
usage = "swift run"
test = "swift test"
shield = "https://img.shields.io/badge/Swift-FA7343.svg?style={badge_style}&logo=swift&logoColor=white"
website = "https://swift.org/"
languages = ["swift"]
category = "package_manager"

# -- C# ------------------------------------------------------------------------

[csharp]
name = "C#"
extensions = [".cs"]
test_frameworks = ["NUnit", "xUnit.net", "MSTest"]

[csharp.package_managers.nuget]
files = ["*.csproj", "*.sln", "nuget.config", "NuGet.Config", "packages.config"]
install = "dotnet restore"
usage = "dotnet run"
test = "dotnet test"
shield = "https://img.shields.io/badge/C%23-239120.svg?style={badge_style}&logo=c-sharp&logoColor=white"
website = "https://docs.microsoft.com/en-us/dotnet/csharp/"
languages = ["csharp"]
category = "package_manager"

# -- F# ------------------------------------------------------------------------

[fsharp]
name = "F#"
extensions = [".fs", ".fsx"]
test_frameworks = ["NUnit", "xUnit.net", "Expecto"]

[fsharp.package_managers.nuget]
files = ["*.fsproj"]
install = "dotnet restore"
usage = "dotnet run"
test = "dotnet test"
shield = "https://img.shields.io/badge/F%23-378BBA.svg?style={badge_style}&logo=.net&logoColor=white"
website = "https://fsharp.org/"
languages = ["fsharp"]
category = "package_manager"

# -- Dart ----------------------------------------------------------------------

[dart]
name = "Dart"
extensions = [".dart"]
test_frameworks = ["test", "flutter_test"]

[dart.package_managers.pub]
files = ["pubspec.yaml", "pubspec.lock"]
install = "pub get"
usage = "dart {entrypoint}"
test = "pub run test"
shield = "https://img.shields.io/badge/Dart-0175C2.svg?style={badge_style}&logo=dart&logoColor=white"
website = "https://dart.dev/"
languages = ["dart"]
category = "package_manager"

# -- Kotlin --------------------------------------------------------------------

[kotlin]
name = "Kotlin"
extensions = [".kt", ".kts"]
test_frameworks = ["JUnit", "TestNG", "Mockito", "Kotest"]

[kotlin.package_managers.gradle]
files = ["build.gradle.kts"]
install = "gradle build"
usage = "gradle run"
test = "gradle test"
shield = "https://img.shields.io/badge/Kotlin-0095D5.svg?style={badge_style}&logo=kotlin&logoColor=white"
website = "https://kotlinlang.org/"
languages = ["kotlin"]
category = "build_system"

# -- Scala ---------------------------------------------------------------------

[scala]
name = "Scala"
extensions = [".scala"]
test_frameworks = ["ScalaTest", "Specs2", "ScalaCheck"]

[scala.package_managers.sbt]
files = ["build.sbt"]
install = "sbt compile"
usage = "sbt run"
test = "sbt test"
shield = "https://img.shields.io/badge/Scala-DC322F.svg?style={badge_style}&logo=scala&logoColor=white"
website = "https://www.scala-lang.org/"
languages = ["scala"]
category = "build_system"

# -- Elixir --------------------------------------------------------------------

[elixir]
name = "Elixir"
extensions = [".ex", ".exs"]
test_frameworks = ["ExUnit"]

[elixir.package_managers.mix]
files = ["mix.exs"]
install = "mix deps.get"
usage = "mix run"
test = "mix test"
shield = "https://img.shields.io/badge/Elixir-4B275F.svg?style={badge_style}&logo=elixir&logoColor=white"
website = "https://elixir-lang.org/"
languages = ["elixir"]
category = "build_system"

# -- Haskell -------------------------------------------------------------------

[haskell]
name = "Haskell"
extensions = [".hs", ".lhs"]
test_frameworks = ["HUnit", "QuickCheck", "Hspec"]

[haskell.package_managers.stack]
files = ["stack.yaml"]
install = "stack build"
usage = "stack exec"
test = "stack test"
shield = "https://img.shields.io/badge/Haskell-5D4F85.svg?style={badge_style}&logo=haskell&logoColor=white"
website = "https://www.haskell.org/"
languages = ["haskell"]
category = "build_system"

# -- Lua -----------------------------------------------------------------------

[lua]
name = "Lua"
extensions = [".lua"]
test_frameworks = ["busted", "luaunit"]

[lua.package_managers.luarocks]
files = ["*.rockspec"]
install = "luarocks install"
usage = "lua {entrypoint}"
test = "busted"
shield = "https://img.shields.io/badge/Lua-2C2D72.svg?style={badge_style}&logo=lua&logoColor=white"
website = "https://www.lua.org/"
languages = ["lua"]
category = "package_manager"

# -- R -------------------------------------------------------------------------

[r]
name = "R"
extensions = [".r", ".R"]
test_frameworks = ["testthat", "RUnit"]

[r.package_managers.packrat]
files = ["packrat.lock"]
install = "packrat::restore()"
usage = "Rscript {entrypoint}"
test = "Rscript -e 'testthat::test_dir(\"tests\")'"
shield = "https://img.shields.io/badge/R-276DC3.svg?style={badge_style}&logo=r&logoColor=white"
website = "https://www.r-project.org/"
languages = ["r"]
category = "package_manager"

# -- Perl ----------------------------------------------------------------------

[perl]
name = "Perl"
extensions = [".pl", ".pm", ".t"]
test_frameworks = ["Test::More", "Test::Unit::Perl", "Test::Class"]

[perl.package_managers.cpanm]
files = ["cpanfile"]
install = "cpanm --installdeps ."
usage = "perl {entrypoint}"
test = "prove -l t"
shield = "https://img.shields.io/badge/Perl-39457E.svg?style={badge_style}&logo=perl&logoColor=white"
website = "https://www.perl.org/"
languages = ["perl"]
category = "package_manager"

# -- Julia ---------------------------------------------------------------------

[julia]
name = "Julia"
extensions = [".jl"]
test_frameworks = ["Test"]

[julia.package_managers.pkg]
files = ["Project.toml", "Manifest.toml"]
install = "julia --project=. -e 'import Pkg; Pkg.instantiate()'"
usage = "julia {entrypoint}"
test = "julia --project=. -e 'import Pkg; Pkg.test()'"
shield = "https://img.shields.io/badge/Julia-9558B2.svg?style={badge_style}&logo=julia&logoColor=white"
website = "https://julialang.org/"
languages = ["julia"]
category = "package_manager"

# -- Erlang --------------------------------------------------------------------

[erlang]
name = "Erlang"
extensions = [".erl", ".hrl"]
test_frameworks = ["EUnit", "Common Test"]

[erlang.package_managers.rebar3]
files = ["rebar.config"]
install = "rebar3 get-deps"
usage = "rebar3 shell"
test = "rebar3 eunit"
shield = "https://img.shields.io/badge/Erlang-A90533.svg?style={badge_style}&logo=erlang&logoColor=white"
website = "https://www.erlang.org/"
languages = ["erlang"]
category = "build_system"

# -- Clojure -------------------------------------------------------------------

[clojure]
name = "Clojure"
extensions = [".clj", ".cljs", ".cljc"]
test_frameworks = ["clojure.test", "expectations", "midje"]

[clojure.package_managers.leiningen]
files = ["project.clj"]
install = "lein deps"
usage = "lein run"
test = "lein test"
shield = "https://img.shields.io/badge/Clojure-5881D8.svg?style={badge_style}&logo=clojure&logoColor=white"
website = "https://clojure.org/"
languages = ["clojure"]
category = "build_system"

# -- OCaml ---------------------------------------------------------------------

[ocaml]
name = "OCaml"
extensions = [".ml", ".mli"]
test_frameworks = ["OUnit", "Alcotest"]

[ocaml.package_managers.opam]
files = ["opam"]
install = "opam install . --deps-only"
usage = "dune exec {entrypoint}"
test = "dune runtest"
shield = "https://img.shields.io/badge/OCaml-EC6813.svg?style={badge_style}&logo=ocaml&logoColor=white"
website = "https://ocaml.org/"
languages = ["ocaml"]
category = "package_manager"

# -- Zig -----------------------------------------------------------------------

[zig]
name = "Zig"
extensions = [".zig"]
test_frameworks = ["Zig's built-in test framework"]

[zig.package_managers.zigmod]
files = ["zig.mod"]
install = "zigmod fetch"
usage = "zig build run"
test = "zig build test"
shield = "https://img.shields.io/badge/Zig-F7A41D.svg?style={badge_style}&logo=zig&logoColor=white"
website = "https://ziglang.org/"
languages = ["zig"]
category = "package_manager"

# -- Nim -----------------------------------------------------------------------

[nim]
name = "Nim"
extensions = [".nim"]
test_frameworks = ["unittest"]

[nim.package_managers.nimble]
files = ["*.nimble"]
install = "nimble install"
usage = "nimble run"
test = "nimble test"
shield = "https://img.shields.io/badge/Nim-FFE953.svg?style={badge_style}&logo=nim&logoColor=black"
website = "https://nim-lang.org/"
languages = ["nim"]
category = "package_manager"

# -- C -------------------------------------------------------------------------

[c]
name = "C"
extensions = [".c", ".h"]
test_frameworks = ["Unity", "Check", "CUnit"]

[c.package_managers.make]
files = ["Makefile"]
install = "make deps"
usage = "make run"
test = "make test"
shield = "https://img.shields.io/badge/C-00599C.svg?style={badge_style}&logo=c&logoColor=white"
website = "https://en.wikipedia.org/wiki/C_(programming_language)"
languages = ["c"]
category = "build_system"

# -- C++ -----------------------------------------------------------------------

[cpp]
name = "C++"
extensions = [".cpp", ".hpp", ".cxx", ".hxx"]
test_frameworks = ["Google Test", "Catch2", "Boost.Test"]

[cpp.package_managers.cmake]
files = ["CMakeLists.txt"]
install = "cmake . && make"
usage = "./{executable}"
test = "ctest"
shield = "https://img.shields.io/badge/C++-00599C.svg?style={badge_style}&logo=c%2B%2B&logoColor=white"
website = "https://isocpp.org/"
languages = ["cpp"]
category = "build_system"

# -- ObjectiveC ----------------------------------------------------------------

[objectivec]
name = "Objective-C"
extensions = [".m", ".h"]
test_frameworks = ["XCTest", "OCMock"]

[objectivec.package_managers.cocoapods]
files = ["Podfile", "Podfile.lock"]
install = "pod install"
usage = "xcodebuild -workspace {workspace} -scheme {scheme} -configuration {configuration}"
test = "xcodebuild -workspace {workspace} -scheme {scheme} -configuration {configuration} -destination 'platform=iOS Simulator,name=iPhone 11' test"
shield = "https://img.shields.io/badge/Objective--C-000000.svg?style={badge_style}&logo=objective-c&logoColor=white"
website = "https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html"

[objectivec.package_managers.swift_package_manager]
files = ["Package.swift"]
install = "swift build"
usage = "swift run"
test = "swift test"
shield = "https://img.shields.io/badge/Swift-FA7343.svg?style={badge_style}&logo=swift&logoColor=white"
website = "https://swift.org/"


# -- Shell ---------------------------------------------------------------------

[shell]
name = "Shell"
extensions = [".sh", ".bash", ".zsh"]
test_frameworks = ["Bats", "shUnit2", "assert.sh"]

[shell.package_managers.bash]
files = [".bashrc", ".bash_profile", ".bash_aliases", ".bash_history"]
install = "chmod +x {entrypoint}"
usage = "./{entrypoint}"
test = "bats *.bats"
shield = "https://img.shields.io/badge/Shell-121011.svg?style={badge_style}&logo=gnu-bash&logoColor=white"
website = "https://www.gnu.org/software/bash/"

# Additional Tools and Frameworks ----------------------------------------------

[api_documentation]
swagger = ["swagger.yml", "swagger.yaml", "swagger.json"]
openapi = ["openapi.yml", "openapi.yaml", "openapi.json"]
postman = ["postman_collection.json", "postman_environment.json"]

[cicd]
github_actions = [".github/workflows/*.yml", ".github/workflows/*.yaml"]
gitlab_ci = [".gitlab-ci.yml", ".gitlab-ci.yaml"]
jenkins = ["Jenkinsfile"]
travis_ci = [".travis.yml"]
circle_ci = [".circleci/config.yml"]

[cloud]
aws = [".aws/config", "cloudformation/*.yaml", "cloudformation/*.json"]
azure = ["azure-pipelines.yml", "*.json"]
gcp = ["app.yaml", "cloudbuild.yaml"]

[code_quality]
eslint = [".eslintrc.json", ".eslintrc.js", ".eslintignore"]
prettier = [".prettierrc", ".prettierrc.json", ".prettierrc.js", ".prettierignore"]
black = ["pyproject.toml"]
flake8 = [".flake8"]
rubocop = [".rubocop.yml"]

[container_runtimes]
docker = ["Dockerfile", "docker-compose.yml", "docker-compose.yaml"]
kubernetes = ["*.yaml", "*.yml"]
helm = ["Chart.yaml"]

[database]
sql = ["*.sql"]
mongodb = ["*.js"]
redis = ["*.redis"]

[documentation]
sphinx = ["conf.py"]
mkdocs = ["mkdocs.yml"]
gitbook = ["SUMMARY.md"]

[frontend]
react = ["package.json"]
vue = ["package.json"]
angular = ["angular.json"]
svelte = ["rollup.config.js", "webpack.config.js"]

[serverless]
aws_sam = ["template.yaml"]
serverless_framework = ["serverless.yml"]

[testing]
selenium = ["*.py", "*.java", "*.js"]
cypress = ["cypress.json"]
jest = ["jest.config.js"]
pytest = ["pytest.ini", "conftest.py"]

[virtualization]
vagrant = ["Vagrantfile"]
